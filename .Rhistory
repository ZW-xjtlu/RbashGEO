exonby
?exonsBy
exbytx_txdb <- exonsBy(txdb,by = "tx")
library(GenomicFeatures)
exbytx_txdb <- exonsBy(txdb,by = "tx")
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
require(BSgenome.Hsapiens.UCSC.hg19)
require(phastCons100way.UCSC.hg19)
require(fitCons.UCSC.hg19)
require(rBS2ndStructure)
require(dplyr)
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene
exbytx_txdb <- exonsBy(txdb,by = "tx")
exbytx_txdb[[1]]
head(unlist(exbytx_txdb))
exbytx_unlist <- unlist(exbytx_txdb)
exbytx_unlist
head(exbytx_unlist$exon_rank)
ex_rank_vec <- exbytx_unlist$exon_rank
names(ex_rank_vec) = 1:length(ex_rank_vec)
head(ex_rank_vec)
last_ex <- lapply(exbytx_txdb, function(gr) gr[ which.max(gr$exon_rank)] )
tapply(ex_rank_vec, names(exbytx_unlist), function(x) names(x)[which.max(x)] )
last_ex_idx <- tapply(ex_rank_vec, names(exbytx_unlist), function(x) names(x)[which.max(x)] )
class(last_ex_idx)
head(last_ex_idx)
head(exbytx_unlist)
exbytx_unlist[as.numeric( last_ex_idx )]
exbytx_unlist
exbytx_unlist[names(exbytx_unlist)]
names(exbytx_unlist)
last_exons <- exbytx_unlist[as.numeric( last_ex_idx )]
last_exons
exbytx_unlist["10"]
exbytx_unlist
exbytx_unlist[c("10","11")]
exbytx_unlist[c("10","11")]
exbytx_unlist[c("9","10","11")]
exbytx_unlist[c("8","9","10","11")]
last_exons_50bp <- resize(last_exons,50,fix = "start")
last_exons_50bp <- resize(last_exons,50,fix = "start")
Feature_matrix$last_exons_50bp <- GR_hg19%over%last_exons_50bp
se_combinded <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/D_InfMerge_2017_12_17/se_combinded.rds")
rowRanges_combinded <- rowRanges(se_combinded)
library(SummarizedExperiment)
se_combinded <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/D_InfMerge_2017_12_17/se_combinded.rds")
rowRanges_combinded <- rowRanges(se_combinded)
Reduce_snt <- function(row_gr){
tssa_idx <- grepl("tssa", mcols(row_gr)[,1])
c(row_gr[!tssa_idx] - 50,resize( row_gr[tssa_idx] , 1, fix = "start"))
}
rowRanges_combinded <- Reduce_snt(rowRanges_combinded)
GR_hg19 = rowRanges_combinded
genes_txdb <- genes(txdb)
Feature_matrix = data.frame(Gene_length_all = Properties_mapp(query_gr = GR_hg19,
feature_gr = genes_txdb,
feature_properties = width(genes_txdb)))
Properties_mapp <- function(query_gr, feature_gr, feature_properties, no_map_val = NA) {
fol <- findOverlaps(query_gr,feature_gr)
return_vec <- rep(no_map_val,length(query_gr))
features_mapped <- feature_properties[subjectHits(fol)]
if(is.logical(feature_properties)) {
Weighted_vec  <- tapply(features_mapped, queryHits(fol), any)
}else{
Weighted_vec <- tapply(features_mapped, queryHits(fol), mean)
}
return_vec[ as.numeric( names(Weighted_vec) )] <- Weighted_vec
return_vec
}
require(TxDb.Hsapiens.UCSC.hg19.knownGene)
require(BSgenome.Hsapiens.UCSC.hg19)
require(phastCons100way.UCSC.hg19)
require(fitCons.UCSC.hg19)
require(rBS2ndStructure)
require(dplyr)
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene
#Feature 1. Gene length all.
genes_txdb <- genes(txdb)
Feature_matrix = data.frame(Gene_length_all = Properties_mapp(query_gr = GR_hg19,
feature_gr = genes_txdb,
feature_properties = width(genes_txdb)))
exbg_txdb <- exonsBy(txdb,by = "gene")
#Feature 2. Gene length exons.
Feature_matrix$Gene_length_ex <- Properties_mapp(query_gr = GR_hg19,
feature_gr = exbg_txdb,
feature_properties = sum(width(exbg_txdb)))
#Feature 3. 5'Cap m6Am (TSS 1nt with A).
TSS <- transcripts(txdb) %>% resize(.,1,fix = "start")
A_idx <- vcountPattern("A", DNAStringSet( Views(Hsapiens, TSS))) > 0
Feature_matrix$m6Am <- GR_hg19%over%TSS[A_idx]
#Feature 4. Start 50bp of the last exon.
exbytx_txdb <- exonsBy(txdb,by = "tx")
exbytx_unlist <- unlist(exbytx_txdb)
ex_rank_vec <- exbytx_unlist$exon_rank
names(ex_rank_vec) = 1:length(ex_rank_vec)
last_ex_idx <- tapply(ex_rank_vec, names(exbytx_unlist), function(x) names(x)[which.max(x)] )
last_exons <- exbytx_unlist[as.numeric( last_ex_idx )]
last_exons_50bp <- resize(last_exons,50,fix = "start")
Feature_matrix$last_exons_50bp <- GR_hg19%over%last_exons_50bp
}
mean(Feature_matrix$last_exons_50bp)
gtcoord_hg19 <- readRDS("/Users/zhenwei/Datasets/Gtcoords/Gtcoord_hg19.rds")
?GuitarPlot
Guitar::GuitarPlot(last_exons_50bp,gtcoord_hg19,saveToPDFprefix = "Last_ex_50bp")
Guitar::GuitarPlot(list(last_exons_50bp),gtcoord_hg19,saveToPDFprefix = "Last_ex_50bp")
Guitar::GuitarPlot(list(Last_exons_50bp = last_exons_50bp),gtcoord_hg19,saveToPDFprefix = "Last_ex_50bp")
UTR3 <- threeUTRsByTranscript(txdb)
hist( sum(width(UTR3)) )
hist( log(sum(width(UTR3)) ))
hist( log(width(exons(txdb)) ))
library(RbashGEO)
?Rhisat2
library(RbashGEO)
?RbashGEO::WgetQC
Coldata_example
library(RbashGEO)
library(RbashGEO)
RbashGEO::WgetQC()
library(RbashGEO)
?RbashGEO::Check_hisat2_reports()
?RbashGEO::Rhisat2
?RbashGEO::WgetQC
library(RbashGEO)
Coldata_example <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/Newdatas/N1_2018_2_2_NewM14/Coldata_M14new.csv")
devtools::use_data(Coldata_example)
#Package meta
Coldata_example <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/Newdatas/N1_2018_2_2_NewM14/Coldata_M14new.csv")
devtools::use_data(Coldata_example,overwrite = T)
library(RbashGEO)
library(RbashGEO)
library(RbashGEO)
library(RbashGEO)
knitr::opts_chunk$set(echo = TRUE)
library(RbashGEO)
Coldata_example
devtools::install_github("ZhenWei10/RbashGEO")
library(RbashGEO)
Coldata_example
Coldata_example
library(RbashGEO)
RbashGEO::Coldata_example
knitr::opts_chunk$set(echo = TRUE)
library(RbashGEO)
Coldata_example
library(RbashGEO)
library(RbashGEO)
library(RbashGEO)
library(RbashGEO)
library(RbashGEO)
library(RbashGEO)
library(RbashGEO)
library(RbashGEO)
?RbashGEO::Count_SRRs()
?RbashGEO::Count_SRRs()
library(RbashGEO)
library(RbashGEO)
?RbashGEO::Count_SRRs()
Annotation_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Intersect.rds")
devtools::use_data(Annotation_gr)
Annotation_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Intersect.rds")
Annotation_gr
devtools::use_data(Annotation_gr)
Annotation_gr <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Intersect.rds")
devtools::use_data(Annotation_gr)
library(RbashGEO)
library(RbashGEO)
library(RbashGEO)
library(RbashGEO)
library(RbashGEO)
library(RbashGEO)
?summarizeOverlaps()
knitr::opts_chunk$set(echo = TRUE)
Coldata_target <- read.csv("Coldata_target")
Coldata_target <- read.csv("Coldata_target.csv")
Coldata_target$Experiment
grepl("human", Coldata_target$Experiment )
Coldata_target_hg19 <- Coldata_target[grepl("human", Coldata_target$Experiment),]
Coldata_target_human <- Coldata_target[grepl("human", Coldata_target$Experiment),]
Coldata_target_mouse <- Coldata_target[grepl("mouse", Coldata_target$Experiment),]
Coldata_target_mouse
write.csv(Coldata_target_human,"Coldata_target_human.csv")
write.csv(Coldata_target_mouse,"Coldata_target_mouse.csv")
?RbashGEO::Count_SRRs()
Coldata_df <- readRDS("Coldata_target_human.csv")
Coldata_df <- read.csv("Coldata_target_human.csv")
register
??register
library(RbashGEO)
knitr::opts_chunk$set(echo = TRUE)
SVM_RMBase_PE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Count_human_SE/SVM_RMBase_PE.rds")
SVM_RMBase_SE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Count_human_SE/SVM_RMBase_SE.rds")
Union_annot_PE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Count_human_SE/Union_annot_PE.rds")
Union_annot_SE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Count_human_SE/Union_annot_SE.rds")
Union_annot_PE
Union_annot_SE
SVM_RMBase_PE
SVM_RMBase <- cbind(SVM_RMBase_PE,SVM_RMBase_SE)
Union_annot <- cbind(Union_annot_PE,Union_annot_SE)
SVM_RMBase
Union_annot
ColData_csv <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Coldata_target_human.csv")
ColData_csv
ColData_csv$SRR_RUN
ColData_csv
match(  paste0(ColData_csv$SRR_RUN,".bam"), colnames(SVM_RMBase))
colData(SVM_RMBase) <- ColData_csv[,match(  paste0(ColData_csv$SRR_RUN,".bam"), colnames(SVM_RMBase))]
colData(SVM_RMBase) <- DataFrame( ColData_csv[,match(  paste0(ColData_csv$SRR_RUN,".bam"), colnames(SVM_RMBase))] )
ColData_csv[,match(  paste0(ColData_csv$SRR_RUN,".bam"), colnames(SVM_RMBase))]
match(  paste0(ColData_csv$SRR_RUN,".bam"), colnames(SVM_RMBase))
dim(Union_annot )
dim(SVM_RMBase )
dim(ColData_csv)
colData(SVM_RMBase) <- DataFrame( ColData_csv[match(  paste0(ColData_csv$SRR_RUN,".bam"), colnames(SVM_RMBase)),] )
colData(Union_annot) <- DataFrame( ColData_csv[match(  paste0(ColData_csv$SRR_RUN,".bam"), colnames(Union_annot)),] )
Union_annot
saveRDS(SVM_RMBase,"SVM_RMBase.rds")
saveRDS(Union_annot,"Union_annot.rds")
SVM_RMBase <- readRDS("SVM_RMBase.rds")
Union_annot <- readRDS("Union_annot.rds")
View(SVM_RMBase)
mean(rowRanges(Union_annot) %in% rowRanges(SVM_RMBase))
mean(rowRanges(Union_annot) %over% rowRanges(SVM_RMBase))
function(gr) (length(reduce(gr + 50)) - length(gr))/length(gr)
clustering_rate <- function(gr) (length(reduce(gr + 50)) - length(gr))/length(gr)
clustering_rate(rowRanges(Union_annot))
clustering_rate <- function(gr) (length(gr) - length(reduce(gr + 50)) )/length(gr)
clustering_rate(rowRanges(Union_annot))
clustering_rate(rowRanges(SVM_RMBase))
SVM_RMBases <- readRDS("SVM_RMBase.rds")
Union_annot <- readRDS("Union_annot.rds")
GC_cont[queryHits(fol)] = mcols(Gene_GC_hg19)[subjectHits(fol),]
come_and_fly_hg19 <- function(SE_hg19) {
library(meripQC)
setwd("/Users/zhenwei/Datasets/Sano_Pack")
hg19_txdb <- AnnotationDbi::loadDb("hg19.txdb")
Gtcoord_hg19 <- readRDS("Gtcoord_hg19.rds")
Gene_GC_hg19 <- readRDS("Gene_GC_hg19.rds")
fol <- findOverlaps( rowRanges( SE_hg19 ), Gene_GC_hg19 )
GC_cont = rep(NA,nrow(SE_hg19))
GC_cont[queryHits(fol)] = mcols(Gene_GC_hg19)[subjectHits(fol),]
Call_DM_design <- function(coldata_x, Drop_incomplete = T) {
coldata_by_Exp <- split(coldata_x,coldata_x$Experiment)
Design_df <- data.frame(idx = 1:nrow(coldata_x))
for(i in names(coldata_by_Exp)) {
Idx_I = coldata_x$Experiment == i
Purt_J <- unique( coldata_by_Exp[[i]]$Perturbation )
Purt_J <- Purt_J[Purt_J != "C"]
for(j in Purt_J) {
Idx_J = Idx_I&(coldata_x$Perturbation == j|coldata_x$Perturbation == "C")
Design_df[[paste0("DM_",i,"_", gsub(":","_",j))]] = Idx_J
}
}
Design_df = Design_df[,-1]
Check_vector  <- apply(Design_df,2,function(x) {
any(c(any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation != "C","IP_input"]),
any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation == "C","IP_input"])))
})
if(any(Check_vector)) {warning(paste0("Warning: Design(s): ", paste( names(Check_vector)[Check_vector] ,collapse = ", ")," have no complete IP and input labels for at least one of the treated or control conditions.\n", ifelse(Drop_incomplete,"These designs are dropped by the setting of `Drop_incomplete`.","")) )}
if(Drop_incomplete) Design_df = Design_df[,!Check_vector]
return(Design_df)
}
Design_hg19 <- Call_DM_design(colData(SE_hg19))
for(i in colnames(Design_hg19)) {
cat(paste0("Processing....: ",i,"\n"))
meRIP_mod_QC_report(se_M = svmRMbase_hg19_count[,Design_hg19[,i]],
txdb = hg19_txdb,
gtcoord = Gtcoord_hg19,
min_num_Mod = 5000,
save_title = i,
DM_analysis = T,
Expected_change = ifelse(grepl("FTO-",i,ignore.case = T),"hyper","hypo"),
DeSeq2_fdr_threshold = .05,
PCA_PLOT = F,
GC_idx_feature = GC_cont)
setwd("..")
}
}
come_and_fly_hg19 <- function(SE_hg19,save_dir = "SVM_RMBase") {
require(meripQC)
hg19_txdb <- AnnotationDbi::loadDb("/Users/zhenwei/Datasets/Sano_Pack/hg19.txdb")
Gtcoord_hg19 <- readRDS("/Users/zhenwei/Datasets/Sano_Pack/Gtcoord_hg19.rds")
Gene_GC_hg19 <- readRDS("/Users/zhenwei/Datasets/Sano_Pack/Gene_GC_hg19.rds")
fol <- findOverlaps( rowRanges( SE_hg19 ), Gene_GC_hg19 )
GC_cont = rep(NA,nrow(SE_hg19))
GC_cont[queryHits(fol)] = mcols(Gene_GC_hg19)[subjectHits(fol),]
if(dir.exists(save_dir)){}else{dir.create(save_dir)}
setwd(save_dir)
Call_DM_design <- function(coldata_x, Drop_incomplete = T) {
coldata_by_Exp <- split(coldata_x,coldata_x$Experiment)
Design_df <- data.frame(idx = 1:nrow(coldata_x))
for(i in names(coldata_by_Exp)) {
Idx_I = coldata_x$Experiment == i
Purt_J <- unique( coldata_by_Exp[[i]]$Perturbation )
Purt_J <- Purt_J[Purt_J != "C"]
for(j in Purt_J) {
Idx_J = Idx_I&(coldata_x$Perturbation == j|coldata_x$Perturbation == "C")
Design_df[[paste0("DM_",i,"_", gsub(":","_",j))]] = Idx_J
}
}
Design_df = Design_df[,-1]
Check_vector  <- apply(Design_df,2,function(x) {
any(c(any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation != "C","IP_input"]),
any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation == "C","IP_input"])))
})
if(any(Check_vector)) {warning(paste0("Warning: Design(s): ", paste( names(Check_vector)[Check_vector] ,collapse = ", ")," have no complete IP and input labels for at least one of the treated or control conditions.\n", ifelse(Drop_incomplete,"These designs are dropped by the setting of `Drop_incomplete`.","")) )}
if(Drop_incomplete) Design_df = Design_df[,!Check_vector]
return(Design_df)
}
Design_hg19 <- Call_DM_design(colData(SE_hg19))
for(i in colnames(Design_hg19)) {
cat(paste0("Processing....: ",i,"\n"))
meRIP_mod_QC_report(se_M = svmRMbase_hg19_count[,Design_hg19[,i]],
txdb = hg19_txdb,
gtcoord = Gtcoord_hg19,
min_num_Mod = 5000,
save_title = i,
DM_analysis = T,
Expected_change = ifelse(grepl("FTO-",i,ignore.case = T),"hyper","hypo"),
DeSeq2_fdr_threshold = .05,
PCA_PLOT = F,
GC_idx_feature = GC_cont)
setwd("..")
}
}
come_and_fly_hg19(SVM_RMBases,"SVM_RMBases2")
come_and_fly_hg19 <- function(SE_hg19,save_dir = "SVM_RMBase") {
require(meripQC)
hg19_txdb <- AnnotationDbi::loadDb("/Users/zhenwei/Datasets/Sano_Pack/hg19.txdb")
Gtcoord_hg19 <- readRDS("/Users/zhenwei/Datasets/Sano_Pack/Gtcoord_hg19.rds")
Gene_GC_hg19 <- readRDS("/Users/zhenwei/Datasets/Sano_Pack/Gene_GC_hg19.rds")
fol <- findOverlaps( rowRanges( SE_hg19 ), Gene_GC_hg19 )
GC_cont = rep(NA,nrow(SE_hg19))
GC_cont[queryHits(fol)] = mcols(Gene_GC_hg19)[subjectHits(fol),]
if(dir.exists(save_dir)){}else{dir.create(save_dir)}
setwd(save_dir)
Call_DM_design <- function(coldata_x, Drop_incomplete = T) {
coldata_by_Exp <- split(coldata_x,coldata_x$Experiment)
Design_df <- data.frame(idx = 1:nrow(coldata_x))
for(i in names(coldata_by_Exp)) {
Idx_I = coldata_x$Experiment == i
Purt_J <- unique( coldata_by_Exp[[i]]$Perturbation )
Purt_J <- Purt_J[Purt_J != "C"]
for(j in Purt_J) {
Idx_J = Idx_I&(coldata_x$Perturbation == j|coldata_x$Perturbation == "C")
Design_df[[paste0("DM_",i,"_", gsub(":","_",j))]] = Idx_J
}
}
Design_df = Design_df[,-1]
Check_vector  <- apply(Design_df,2,function(x) {
any(c(any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation != "C","IP_input"]),
any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation == "C","IP_input"])))
})
if(any(Check_vector)) {warning(paste0("Warning: Design(s): ", paste( names(Check_vector)[Check_vector] ,collapse = ", ")," have no complete IP and input labels for at least one of the treated or control conditions.\n", ifelse(Drop_incomplete,"These designs are dropped by the setting of `Drop_incomplete`.","")) )}
if(Drop_incomplete) Design_df = Design_df[,!Check_vector]
return(Design_df)
}
Design_hg19 <- Call_DM_design(colData(SE_hg19))
for(i in colnames(Design_hg19)) {
cat(paste0("Processing....: ",i,"\n"))
meRIP_mod_QC_report(se_M = SE_hg19[,Design_hg19[,i]],
txdb = hg19_txdb,
gtcoord = Gtcoord_hg19,
min_num_Mod = 5000,
save_title = i,
DM_analysis = T,
Expected_change = ifelse(grepl("FTO-",i,ignore.case = T),"hyper","hypo"),
DeSeq2_fdr_threshold = .05,
PCA_PLOT = F,
GC_idx_feature = GC_cont)
setwd("..")
}
}
come_and_fly_hg19(SVM_RMBases,"SVM_RMBases2")
SVM_RMBase_PE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Count_human_SE/SVM_RMBase_PE.rds")
SVM_RMBase_SE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Count_human_SE/SVM_RMBase_SE.rds")
Union_annot_PE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Count_human_SE/Union_annot_PE.rds")
Union_annot_SE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Count_human_SE/Union_annot_SE.rds")
SVM_RMBase <- cbind(SVM_RMBase_PE,SVM_RMBase_SE)
Union_annot <- cbind(Union_annot_PE,Union_annot_SE)
ColData_csv <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Coldata_target_human.csv")
colData(SVM_RMBase) <- DataFrame( ColData_csv[match(colnames(SVM_RMBase),paste0(ColData_csv$SRR_RUN,".bam")),] )
colData(Union_annot) <- DataFrame( ColData_csv[match(colnames(Union_annot), paste0(ColData_csv$SRR_RUN,".bam")),] )
saveRDS(SVM_RMBase,"SVM_RMBase.rds")
saveRDS(Union_annot,"Union_annot.rds")
SVM_RMBase <- readRDS("SVM_RMBase.rds")
Union_annot <- readRDS("Union_annot.rds")
mean(rowRanges(Union_annot) %over% rowRanges(SVM_RMBase)) #0.4365562, while they still having substential amoungt of over lapping
clustering_rate <- function(gr) (length(gr) - length(reduce(gr + 50)) )/length(gr)
clustering_rate(rowRanges(Union_annot)) #0.660323.
clustering_rate(rowRanges(SVM_RMBase)) #0.5640923  although both of them are heavily clustered, Union_annot is particularly severe.
SVM_RMBases <- readRDS("SVM_RMBase.rds")
Union_annot <- readRDS("Union_annot.rds")
come_and_fly_hg19 <- function(SE_hg19,save_dir = "SVM_RMBase") {
require(meripQC)
hg19_txdb <- AnnotationDbi::loadDb("/Users/zhenwei/Datasets/Sano_Pack/hg19.txdb")
Gtcoord_hg19 <- readRDS("/Users/zhenwei/Datasets/Sano_Pack/Gtcoord_hg19.rds")
Gene_GC_hg19 <- readRDS("/Users/zhenwei/Datasets/Sano_Pack/Gene_GC_hg19.rds")
fol <- findOverlaps( rowRanges( SE_hg19 ), Gene_GC_hg19 )
GC_cont = rep(NA,nrow(SE_hg19))
GC_cont[queryHits(fol)] = mcols(Gene_GC_hg19)[subjectHits(fol),]
if(dir.exists(save_dir)){}else{dir.create(save_dir)}
setwd(save_dir)
Call_DM_design <- function(coldata_x, Drop_incomplete = T) {
coldata_by_Exp <- split(coldata_x,coldata_x$Experiment)
Design_df <- data.frame(idx = 1:nrow(coldata_x))
for(i in names(coldata_by_Exp)) {
Idx_I = coldata_x$Experiment == i
Purt_J <- unique( coldata_by_Exp[[i]]$Perturbation )
Purt_J <- Purt_J[Purt_J != "C"]
for(j in Purt_J) {
Idx_J = Idx_I&(coldata_x$Perturbation == j|coldata_x$Perturbation == "C")
Design_df[[paste0("DM_",i,"_", gsub(":","_",j))]] = Idx_J
}
}
Design_df = Design_df[,-1]
Check_vector  <- apply(Design_df,2,function(x) {
any(c(any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation != "C","IP_input"]),
any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation == "C","IP_input"])))
})
if(any(Check_vector)) {warning(paste0("Warning: Design(s): ", paste( names(Check_vector)[Check_vector] ,collapse = ", ")," have no complete IP and input labels for at least one of the treated or control conditions.\n", ifelse(Drop_incomplete,"These designs are dropped by the setting of `Drop_incomplete`.","")) )}
if(Drop_incomplete) Design_df = Design_df[,!Check_vector]
return(Design_df)
}
Design_hg19 <- Call_DM_design(colData(SE_hg19))
for(i in colnames(Design_hg19)) {
cat(paste0("Processing....: ",i,"\n"))
meRIP_mod_QC_report(se_M = SE_hg19[,Design_hg19[,i]],
txdb = hg19_txdb,
gtcoord = Gtcoord_hg19,
min_num_Mod = 5000,
save_title = i,
DM_analysis = T,
Expected_change = ifelse(grepl("FTO-",i,ignore.case = T),"hyper","hypo"),
DeSeq2_fdr_threshold = .05,
PCA_PLOT = F,
GC_idx_feature = GC_cont)
setwd("..")
}
}
come_and_fly_hg19(SVM_RMBases,"SVM_RMBases2")
SVM_RMBase_PE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Count_human_SE/SVM_RMBase_PE.rds")
SVM_RMBase_SE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Count_human_SE/SVM_RMBase_SE.rds")
Union_annot_PE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Count_human_SE/Union_annot_PE.rds")
Union_annot_SE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Count_human_SE/Union_annot_SE.rds")
SVM_RMBase <- cbind(SVM_RMBase_PE,SVM_RMBase_SE)
Union_annot <- cbind(Union_annot_PE,Union_annot_SE)
ColData_csv <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/Coldata_target_human.csv")
dim(ColData_csv)
ColData_csv
ColData_csv$SRR_RUN
SVM_RMBase = SVM_RMBase[,paste0( ColData_csv$SRR_RUN, ".bam")]
Union_annot = Union_annot[,paste0( ColData_csv$SRR_RUN, ".bam")]
colData(SVM_RMBase) <- DataFrame( ColData_csv )
colData(Union_annot) <- DataFrame( ColData_csv )
saveRDS(SVM_RMBase,"SVM_RMBase.rds")
saveRDS(Union_annot,"Union_annot.rds")
SVM_RMBase <- readRDS("SVM_RMBase.rds")
Union_annot <- readRDS("Union_annot.rds")
mean(rowRanges(Union_annot) %over% rowRanges(SVM_RMBase)) #0.4365562, while they still having substential amoungt of over lapping
clustering_rate <- function(gr) (length(gr) - length(reduce(gr + 50)) )/length(gr)
clustering_rate(rowRanges(Union_annot)) #0.660323.
clustering_rate(rowRanges(SVM_RMBase)) #0.5640923  although both of them are heavily clustered, Union_annot is particularly severe.
SVM_RMBases <- readRDS("SVM_RMBase.rds")
Union_annot <- readRDS("Union_annot.rds")
come_and_fly_hg19 <- function(SE_hg19,save_dir = "SVM_RMBase") {
require(meripQC)
hg19_txdb <- AnnotationDbi::loadDb("/Users/zhenwei/Datasets/Sano_Pack/hg19.txdb")
Gtcoord_hg19 <- readRDS("/Users/zhenwei/Datasets/Sano_Pack/Gtcoord_hg19.rds")
Gene_GC_hg19 <- readRDS("/Users/zhenwei/Datasets/Sano_Pack/Gene_GC_hg19.rds")
fol <- findOverlaps( rowRanges( SE_hg19 ), Gene_GC_hg19 )
GC_cont = rep(NA,nrow(SE_hg19))
GC_cont[queryHits(fol)] = mcols(Gene_GC_hg19)[subjectHits(fol),]
if(dir.exists(save_dir)){}else{dir.create(save_dir)}
setwd(save_dir)
Call_DM_design <- function(coldata_x, Drop_incomplete = T) {
coldata_by_Exp <- split(coldata_x,coldata_x$Experiment)
Design_df <- data.frame(idx = 1:nrow(coldata_x))
for(i in names(coldata_by_Exp)) {
Idx_I = coldata_x$Experiment == i
Purt_J <- unique( coldata_by_Exp[[i]]$Perturbation )
Purt_J <- Purt_J[Purt_J != "C"]
for(j in Purt_J) {
Idx_J = Idx_I&(coldata_x$Perturbation == j|coldata_x$Perturbation == "C")
Design_df[[paste0("DM_",i,"_", gsub(":","_",j))]] = Idx_J
}
}
Design_df = Design_df[,-1]
Check_vector  <- apply(Design_df,2,function(x) {
any(c(any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation != "C","IP_input"]),
any(!c("IP","input") %in% coldata_x[x & coldata_x$Perturbation == "C","IP_input"])))
})
if(any(Check_vector)) {warning(paste0("Warning: Design(s): ", paste( names(Check_vector)[Check_vector] ,collapse = ", ")," have no complete IP and input labels for at least one of the treated or control conditions.\n", ifelse(Drop_incomplete,"These designs are dropped by the setting of `Drop_incomplete`.","")) )}
if(Drop_incomplete) Design_df = Design_df[,!Check_vector]
return(Design_df)
}
Design_hg19 <- Call_DM_design(colData(SE_hg19))
for(i in colnames(Design_hg19)) {
cat(paste0("Processing....: ",i,"\n"))
meRIP_mod_QC_report(se_M = SE_hg19[,Design_hg19[,i]],
txdb = hg19_txdb,
gtcoord = Gtcoord_hg19,
min_num_Mod = 5000,
save_title = i,
DM_analysis = T,
Expected_change = ifelse(grepl("FTO-",i,ignore.case = T),"hyper","hypo"),
DeSeq2_fdr_threshold = .05,
PCA_PLOT = F,
GC_idx_feature = GC_cont)
setwd("..")
}
}
come_and_fly_hg19(SVM_RMBases,"SVM_RMBases2")
