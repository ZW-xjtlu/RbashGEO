cat(paste0(i,": ",names(tb_i),": ",tb_i,"\n"))
}
return(Consistent_targeting)
}
Targets_By_prots <- Consistent_reduction(SE_return,"Regulators")
Targets_By_types <- Consistent_reduction(SE_return,"Role")
Prot_targ_M <- Reduce(cbind,Targets_By_prots)
Prot_type_M <- Reduce(cbind,Targets_By_types)
colnames(Prot_targ_M) = names(Targets_By_prots)
colnames(Prot_type_M) = names(Targets_By_types)
SE_Temp = SummarizedExperiment(cbind(Prot_targ_M,Prot_type_M))
colData(SE_Temp) = DataFrame(
ID = paste0(colnames(SE_Temp),"-consistent"),
Regulators = "-",
Role = "-"
)
rowRanges(SE_Temp) = rowRanges(SE_return)
SE_return <- cbind(SE_return,SE_Temp)
saveRDS(SE_return, paste0(outname, ".rds"))
}
union_hg19_gr <- readRDS("./union_hg19_gr.rds")
svm_hg19_gr <- readRDS("./svm_hg19_gr.rds")
union_mm10_gr <- readRDS("./union_mm10_gr.rds")
svm_mm10_gr <- readRDS("./svm_mm10_gr.rds")
Let_us_fly(svm_hg19_gr,Col_dir = "human_svm_QC",outname = "svm_mouse")
union_mm10_gr
SummarizedExperiment( svm_hg19_gr )
Let_us_fly <- function(Row_GR,Col_dir = ".",outname = "Untitled") {
require(SummarizedExperiment)
#Create a matrix with entries of 0 and 1 (that are suitable for m6ALogisticModel.)
file.list <- grep("\\.",list.files(Col_dir),value = T, invert = T)
ASSAY_df = data.frame(Indx = 1:length(Row_GR))
for (i in file.list){
DS_rst_i <- readRDS(paste0(gsub("\\/$","",Col_dir),"/",i,"/",i,"_ds_result.rds"))
Dcs <- DS_rst_i$Decision
Dcs[Dcs == "Targeted"] = 1
Dcs[Dcs == "Insig"] = NA
Dcs[Dcs == "Control"] = 0
ASSAY_df[[i]] <- Dcs
}
ASSAY_df = ASSAY_df[,-1]
SE_return <- SummarizedExperiment(matrix(as.integer( as.matrix(ASSAY_df) ),ncol = ncol(ASSAY_df)))
rowRanges(SE_return) = Row_GR
#One drawback immediately reveal it self. that is this approach does not return a good colData.
#I need to add it by my own hand.
Extract_Regulator <- function(Char_Vec){
idx_prot = gsub("^.*_","",Char_Vec)
idx_prot = gsub("-$","",idx_prot)
idx_prot = gsub("\\+$","",idx_prot)
idx_prot = toupper(idx_prot)
return(idx_prot)
}
Extract_Role <- function(Char_Vec){
idx_writer = rep("writer",length(Char_Vec))
idx_writer[ grepl("fto",Char_Vec, ignore.case = T) | grepl("alkbh", Char_Vec, ignore.case = T) ] = "eraser"
return(idx_writer)
}
colData(SE_return) = DataFrame(ID = file.list,
Regulators = Extract_Regulator(file.list),
Role = Extract_Role(file.list))
Consistent_reduction <- function(SE,COL = "Regulators"){
Indx_consist <- colData(SE)[[COL]]
ASSAY_LST <- split(
split(t( matrix( as.integer( assay(SE) ),
ncol = length(Indx_consist))),
1:length(Indx_consist)),
Indx_consist)
Consistent_targeting <- lapply(ASSAY_LST,function(x) {
indx_target <- lapply(x, function(y) {
y[which(y == 0)] = -2
y[is.na(y)] = 0
return(y)
})
Rindx_targ <- Reduce(`+`,indx_target)
return_vec <- rep(NA, length(Rindx_targ))
return_vec[Rindx_targ >= min(2,length(x))] = 1
indx_rev <- lapply(x, function(y) {
y[which(y == 1)] = -2
y[which(y == 0)] = 1
y[is.na(y)] = 0
return(y)
})
Rindx_rev <- Reduce(`+`, indx_rev)
return_vec[Rindx_rev >= min(2,length(x))] = 0
return(return_vec)
})
for(i in names(Consistent_targeting)) {
tb_i =  table( Consistent_targeting[[ i ]] )
cat(paste0(i,": ",names(tb_i),": ",tb_i,"\n"))
}
return(Consistent_targeting)
}
Targets_By_prots <- Consistent_reduction(SE_return,"Regulators")
Targets_By_types <- Consistent_reduction(SE_return,"Role")
Prot_targ_M <- Reduce(cbind,Targets_By_prots)
Prot_type_M <- Reduce(cbind,Targets_By_types)
colnames(Prot_targ_M) = names(Targets_By_prots)
colnames(Prot_type_M) = names(Targets_By_types)
SE_Temp = SummarizedExperiment(cbind(Prot_targ_M,Prot_type_M))
colData(SE_Temp) = DataFrame(
ID = paste0(colnames(SE_Temp),"-consistent"),
Regulators = "-",
Role = "-"
)
rowRanges(SE_Temp) = rowRanges(SE_return)
SE_return <- cbind(SE_return,SE_Temp)
saveRDS(SE_return, paste0(outname, ".rds"))
}
Let_us_fly(svm_hg19_gr,Col_dir = "human_svm_QC",outname = "svm_mouse")
union_hg19_gr <- readRDS("./union_hg19_gr.rds")
svm_hg19_gr <- readRDS("./svm_hg19_gr.rds")
Let_us_fly(svm_hg19_gr,Col_dir = "human_svm_QC",outname = "svm_mouse")
Let_us_fly(union_hg19_gr,Col_dir = "human_union_QC",outname = "union_mouse")
Let_us_fly(svm_mm10_gr,Col_dir = "mouse_svm_QC",outname = "svm_mouse")
Let_us_fly(union_mm10_gr,Col_dir = "mouse_union_QC",outname = "union_mouse")
Let_us_fly(svm_hg19_gr,Col_dir = "human_svm_QC",outname = "svm_human")
Let_us_fly(union_hg19_gr,Col_dir = "human_union_QC",outname = "union_human")
Let_us_fly(svm_mm10_gr,Col_dir = "mouse_svm_QC",outname = "svm_mouse")
Let_us_fly(union_mm10_gr,Col_dir = "mouse_union_QC",outname = "union_mouse")
svm_human <- readRDS("svm_human.rds")
svm_human
assay(svm_human)
colnames(svm_human)
colData(svm_human)
assay(svm_human)[,5]
table(assay(svm_human)[,5])
DS_res <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_ds_result.rds")
DS_res
table(DS_res$Decision)
DS_res$pvalue < 0.168640466306501
na.omit( DS_res$pvalue < 0.168640466306501)
ex <- DS_res$pvalue < 0.168640466306501
sum(ex[!is.na(ex)])
ex <- DS_res$pvalue <= 0.168640466306501 & DS_res$log2FoldChange > 0
sum(ex[!is.na(ex)])
ex <- DS_res$pvalue < 0.168640466306501 & DS_res$log2FoldChange < 0
sum(ex[!is.na(ex)])
ex <- DS_res$pvalue < 0.168640466306501 & DS_res$log2FoldChange > 0
sum(ex[!is.na(ex)])
apply(assay(svm_human),2,table)
ds_result <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_ds_result.rds")
Dcs_tb <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_Dcs_tb.csv")
Dcs_tb <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_Dcs_tb.csv")
Decision_O <- ds_result$Decision
Dcs_tb <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_Dcs_tb.csv")
ds_result$Decision = "Insig"
#Make decisions based on the decision table.
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Dcs_tb
Dcs_tb$Cut_By_ctrl]
Dcs_tb$Cut_By_ctrl
(ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
ds_result[[Dcs_tb$Cut_By_ctrl]]
ds_result
ds_result <- as.data.frame( ds_result )
#Make decisions based on the decision table.
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Control_index
table(Control_index)
sum(ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl)
Dcs_tb$log2FC_cut
if (Dcs_tb$Expected_dir == "< 0"){
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
} else {
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
}
sum(Control_index)
table(Control_index)
ds_result <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_ds_result.rds")
Decision_O <- ds_result$Decision
# Analysis DESeq2 result and generate a decision table:
Dcs_tb <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_Dcs_tb.csv")
ds_result$Decision = "Insig"
ds_result <- as.data.frame( ds_result )
if (Dcs_tb$Expected_dir == "< 0"){
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
} else {
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
}
if(is.null(Expected_change) & DM_analysis){
ds_result$Decision[Control_index] = "Hypo-Meth"
ds_result$Decision[Expected_index] = "Hyper-Meth"
}
Expected_change = ">0"
ds_result$Decision[Control_index] = "Control"
ds_result$Decision[Expected_index] = ifelse(!is.null(Expected_change),"Targeted","Methylated")
table(ds_result$Decision)
ds_result <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_ds_result.rds")
Decision_O <- ds_result$Decision
# Analysis DESeq2 result and generate a decision table:
Dcs_tb <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_Dcs_tb.csv")
ds_result$Decision = "Insig"
ds_result <- as.data.frame( ds_result )
if (Dcs_tb$Expected_dir == "< 0"){
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
} else {
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
}
Dcs_tb$Expected_dir
Dcs_tb$Expected_dir == "< 0"
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
table(Control_index )
table(ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
table((ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut))
Dcs_tb$Cut_By_ctrl
Dcs_tb$Cut_Val_ctrl
(ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
table((ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut))
(ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
table((ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut))
(ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
ds_result$pvalue < 0.168640466306501
ds_result$pvalue < 0.168640466306501 & ds_result$log2FoldChange > 0
table(ds_result$pvalue < 0.168640466306501 & ds_result$log2FoldChange > 0)
table(ds_result$pvalue < 0.168640466306501 & ds_result$log2FoldChange > 0)
Dcs_tb$Cut_By_ctrl
Dcs_tb$Cut_Val_ctrl
Dcs_tb$Cut_By_ctrl
table( (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut))
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[as.character(Dcs_tb$Cut_By_expected)]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
table( Expected_index)
Let_us_fly <- function(Row_GR,Col_dir = ".",outname = "Untitled") {
require(SummarizedExperiment)
#Create a matrix with entries of 0 and 1 (that are suitable for m6ALogisticModel.)
file.list <- grep("\\.",list.files(Col_dir),value = T, invert = T)
ASSAY_df = data.frame(Indx = 1:length(Row_GR))
for (i in file.list){
DS_rst_i <- readRDS(paste0(gsub("\\/$","",Col_dir),"/",i,"/",i,"_ds_result.rds"))
Dcs <- DS_rst_i$Decision
Dcs[Dcs == "Targeted"] = 1
Dcs[Dcs == "Insig"] = NA
Dcs[Dcs == "Control"] = 0
ASSAY_df[[i]] <- Dcs
}
ASSAY_df = ASSAY_df[,-1]
SE_return <- SummarizedExperiment(matrix(as.integer( as.matrix(ASSAY_df) ),ncol = ncol(ASSAY_df)))
rowRanges(SE_return) = Row_GR
#One drawback immediately reveal it self. that is this approach does not return a good colData.
#I need to add it by my own hand.
Extract_Regulator <- function(Char_Vec){
idx_prot = gsub("^.*_","",Char_Vec)
idx_prot = gsub("-$","",idx_prot)
idx_prot = gsub("\\+$","",idx_prot)
idx_prot = toupper(idx_prot)
return(idx_prot)
}
Extract_Role <- function(Char_Vec){
idx_writer = rep("writer",length(Char_Vec))
idx_writer[ grepl("fto",Char_Vec, ignore.case = T) | grepl("alkbh", Char_Vec, ignore.case = T) ] = "eraser"
return(idx_writer)
}
colData(SE_return) = DataFrame(ID = file.list,
Regulators = Extract_Regulator(file.list),
Role = Extract_Role(file.list))
Consistent_reduction <- function(SE,COL = "Regulators"){
Indx_consist <- colData(SE)[[COL]]
ASSAY_LST <- split(
split(t( matrix( as.integer( assay(SE) ),
ncol = length(Indx_consist))),
1:length(Indx_consist)),
Indx_consist)
Consistent_targeting <- lapply(ASSAY_LST,function(x) {
indx_target <- lapply(x, function(y) {
y[which(y == 0)] = -2
y[is.na(y)] = 0
return(y)
})
Rindx_targ <- Reduce(`+`,indx_target)
return_vec <- rep(NA, length(Rindx_targ))
return_vec[Rindx_targ >= min(2,length(x))] = 1
indx_rev <- lapply(x, function(y) {
y[which(y == 1)] = -2
y[which(y == 0)] = 1
y[is.na(y)] = 0
return(y)
})
Rindx_rev <- Reduce(`+`, indx_rev)
return_vec[Rindx_rev >= min(2,length(x))] = 0
return(return_vec)
})
for(i in names(Consistent_targeting)) {
tb_i =  table( Consistent_targeting[[ i ]] )
cat(paste0(i,": ",names(tb_i),": ",tb_i,"\n"))
}
return(Consistent_targeting)
}
Targets_By_prots <- Consistent_reduction(SE_return,"Regulators")
Targets_By_types <- Consistent_reduction(SE_return,"Role")
Prot_targ_M <- Reduce(cbind,Targets_By_prots)
Prot_type_M <- Reduce(cbind,Targets_By_types)
colnames(Prot_targ_M) = names(Targets_By_prots)
colnames(Prot_type_M) = names(Targets_By_types)
SE_Temp = SummarizedExperiment(cbind(Prot_targ_M,Prot_type_M))
colData(SE_Temp) = DataFrame(
ID = paste0(colnames(SE_Temp),"-consistent"),
Regulators = "-",
Role = "-"
)
rowRanges(SE_Temp) = rowRanges(SE_return)
SE_return <- cbind(SE_return,SE_Temp)
saveRDS(SE_return, paste0(outname, ".rds"))
}
union_mm10_gr <- readRDS("./union_mm10_gr.rds")
svm_mm10_gr <- readRDS("./svm_mm10_gr.rds")
Let_us_fly(svm_mm10_gr,Col_dir = "mouse_svm_QC",outname = "svm_mouse")
Let_us_fly(union_mm10_gr,Col_dir = "mouse_union_QC",outname = "union_mouse")
mouse_union_QC <- readRDS("mouse_union_QC.rds")
mouse_union_QC <- readRDS("svm_mouse.rds")
apply(2,assay(mouse_union_QC),table)
apply(assay(mouse_union_QC),2,table)
colData(mouse_union_QC)
colData(mouse_union_QC)$ID
ds_result <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/mouse_svm_QC/DM_mouse-3T3L1_Fto-/DM_mouse-3T3L1_Fto-_ds_result.rds")
ds_result <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/mouse_svm_QC/DM_mouse-3T3L1_Fto-/DM_mouse-3T3L1_Fto-_ds_result.rds")
Dcs_tb <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/mouse_svm_QC/DM_mouse-3T3L1_Fto-/DM_mouse-3T3L1_Fto-_Dcs_tb.csv")
ds_result <- as.data.frame( readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/mouse_svm_QC/DM_mouse-3T3L1_Fto-/DM_mouse-3T3L1_Fto-_ds_result.rds"))
Dcs_tb <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/mouse_svm_QC/DM_mouse-3T3L1_Fto-/DM_mouse-3T3L1_Fto-_Dcs_tb.csv")
ds_result$Decision = "Insig"
if (Dcs_tb$Expected_dir == "< 0"){
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[as.character(Dcs_tb$Cut_By_expected)]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
} else {
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[as.character(Dcs_tb$Cut_By_expected)]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
}
table(Control_index )
table(Expected_index)
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[as.character(Dcs_tb$Cut_By_expected)]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
table(Control_index )
table(Expected_index)
Dcs_tb$Cut_Val_ctrl
ds_result <- as.data.frame( readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/mouse_svm_QC/DM_mouse-midbrain_Fto-/DM_mouse-midbrain_Fto-_ds_result.rds"))
Dcs_tb <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/mouse_svm_QC/DM_mouse-midbrain_Fto-/DM_mouse-midbrain_Fto-_Dcs_tb.csv")
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[as.character(Dcs_tb$Cut_By_expected)]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
table(Control_index)
table(Expected_index)
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[as.character(Dcs_tb$Cut_By_expected)]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
table(Control_index )
table(Expected_index)
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[as.character(Dcs_tb$Cut_By_expected)]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
table(Control_index)
table(Expected_index)
table(ds_result$Decision)
svm_mouse <- readRDS("svm_mouse.rds")
apply(assay(svm_mouse),2,table)
colData(svm_mouse)
colData(svm_mouse)[9,]
library(RbashGEO)
?Count_from_coldata
knitr::opts_chunk$set(echo = TRUE)
library(RbashGEO)
library(GenomicFeatures)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
Annot_GR <- exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene,by = "genes")
Annot_GR <- exonsBy(TxDb.Hsapiens.UCSC.hg19.knownGene,by = "gene")
Count_SRRs
library(m6ALogisticModel)
?meRIP_mod_QC_report
library(meripQC)
?meRIP_mod_QC_report
?meRIP_mod_QC_report
??meRIP_mod_QC_report
?meRIP_mod_QC_report
meripQC::meRIP_QC_report()
?meRIP_QC_report
Count_SRRs
?Count_SRRs
?SummarizedExperiment
knitr::opts_chunk$set(echo = TRUE)
qc_names <- paste0("QC_inf_post",gsub("\\.|RMbase_posterior_|rds","",gr_names))
knitr::opts_chunk$set(echo = TRUE)
library(RbashGEO)
?Count_SRRs
library(DESeq2)
?rlogTransformation
group_meth <- paste0( colData(SE_x)$Experiment,"-", colData(SE_x)$Perturbation )
gsub("_BR[//d]", "","10_BR1"
)
gsub("_BR[//d]", "","10_BR1")
gsub("_BR[\\d]", "","10_BR1")
gsub("_BR\\d", "","10_BR1")
gsub("_BR\\d", "","10_BR19")
grepl("FTO\\d[C,D]\\d","FTO0C2"
)
grepl("FTO\\d[C,D]\\d","FTO0D
2"
)
grepl("FTO\\d[C,D]\\d","FTO0D2")
col_df_2 <- read.csv("coldata_target_hg19.csv")
?makeExampleDESeqDataSet
dds <- DESeqDataSet(SE_i,design = ~ 1)
?rlog
dds <- makeExampleDESeqDataSet(m=6,betaSD=1)
rld <- rlog(dds)
dists <- dist(t(assay(rld)))
plot(hclust(dists))
# run the rlog transformation on one dataset
design(dds) <- ~ 1
dds <- estimateSizeFactors(dds)
dds <- estimateDispersions(dds)
rld <- rlog(dds, blind=FALSE)
dds <- makeExampleDESeqDataSet(m=6,betaSD=1)
rld <- rlog(dds)
dists <- dist(t(assay(rld)))
plot(hclust(dists))
# run the rlog transformation on one dataset
design(dds) <- ~ 1
rld <- rlog(dds, blind=FALSE)
rld
?estimateDispersions
rld
assays(rld <- rlog(dds,blind = F))
assays(rld)
assays(rld)[1]
assays(rld)[[1]]
?rlogTransformation
des_meth <- read.csv("ColDesign_Meth")
des_meth <- read.csv("ColDesign_Meth.csv")
des_meth$Experiment
library(GenomicAlignments)
?summarizeOverlaps
library(m6ALogisticModel)
SE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/O_DM_svm_posterior/merged_posts_2.0/merged_QC_inf_post05.rds")
SE
assays(SE)
assays(SE)[[1]]
library(m6ALogisticModel)
?m6ALogisticModel::predictors.annot()
library(m6ALogisticModel)
library(SummarizedExperiment)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(BSgenome.Hsapiens.UCSC.hg19)
library(fitCons.UCSC.hg19)
library(phastCons100way.UCSC.hg19)
SE <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/O_DM_svm_posterior/merged_posts_2.0/merged_QC_inf_post05.rds")
Feature_List_hg19 = list(
HNRNPC_eCLIP = eCLIP_HNRNPC_gr,
YTHDC1_TREW = YTHDC1_TREW_gr,
YTHDF1_TREW = YTHDF1_TREW_gr,
YTHDF2_TREW = YTHDF2_TREW_gr,
miR_targeted_genes = miR_targeted_genes_grl,
#miRanda = miRanda_hg19_gr,
TargetScan = TargetScan_hg19_gr,
Verified_miRtargets = verified_targets_gr
)
SE_features_added <- predictors.annot(se = SE ,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_hg19,
HK_genes_list = HK_hg19_eids)
SE_features_added
Features <- mcols(SE_features_added)
SE_features_added
Features$Y_1 <- assay(SE_features_added)[,1]
glm(Y_1~.,class = binomial(link = "logit"),data = Features)
?glm
glm(Y_1~.,class = binomial(link = "logit"),data = data.frame( Features))
glm(Y_1~.,family = binomial(link = "logit"),data = data.frame( Features))
summary( glm(Y_1~.,family = binomial(link = "logit"),data = data.frame( Features)) )
summary( glm(Y_1~.,family = binomial(link = "logit"),data = data.frame( Features))[!is.na(Features$Y_1),] )
table(!is.na(Features$Y_1))
summary( glm(Y_1~.,family = binomial(link = "logit"),data = data.frame( Features)[!is.na(Features$Y_1),]) )
Features$Y_1 <- assay(SE_features_added)[,2]
summary( glm(Y_1~.,family = binomial(link = "logit"),data = data.frame( Features)[!is.na(Features$Y_1),]) )
Features$Y_1 <- assay(SE_features_added)[,3]
summary( glm(Y_1~.,family = binomial(link = "logit"),data = data.frame( Features)[!is.na(Features$Y_1),]) )
Features$Y_1 <- assay(SE_features_added)[,4]
summary( glm(Y_1~.,family = binomial(link = "logit"),data = data.frame( Features)[!is.na(Features$Y_1),]) )
colData(SE_features_added)
SE_KI <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/O_DM_svm_posterior/All_QC/QC_inf_post05/DM_human-A549_KIAA1429-/DM_human-A549_KIAA1429-_inf_result.rds")
SE_KI
dim(SE_KI)
dim(Features)
assay(SE_features_added)[,1]
which(assay(SE_features_added)[,1] == 1)
which(SE_KI$Decision == "targeted")
table(SE_KI$Decision)
which(SE_KI$Decision == "Targeted")
which(assay(SE_features_added)[,1] == 1)
all.equal( which(assay(SE_features_added)[,1] == 1), which(SE_KI$Decision == "Targeted"))
table(SE_KI$Decision,Features$long_exon)
fisher.test( table(SE_KI$Decision[!is.na(Features$Y_1)],Features$long_exon[!is.na(Features$Y_1)]) )
table(SE_KI$Decision[!is.na(Features$Y_1)],Features$long_exon[!is.na(Features$Y_1)])
fisher.test( table(SE_KI$Decision[!is.na(assay(SE_features_added)[,1])],Features$long_exon[!is.na(assay(SE_features_added)[,1])]))
table(SE_KI$Decision[!is.na(assay(SE_features_added)[,1])],Features$long_exon[!is.na(assay(SE_features_added)[,1])])
library(meripQC)
meripQC::Plot_ex_lengths()
meripQC::Plot_ex_lengths(list(
targeted = SE[SE_KI$Decision == "Targeted",],
reversed = SE[SE_KI$Decision == "Control",]
),TxDb.Hsapiens.UCSC.hg19.knownGene,"KIAA")
SE
assay(SE)
colData(SE)
rowRanges(SE)
?`DESeq2-package`
