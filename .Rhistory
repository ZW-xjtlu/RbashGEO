ALKBH5_PARCLIP = ALKBH5_PARCLIP,
FTO_CLIP = FTO_CLIP,
FTO_eCLIP = FTO_eCLIP
)
SE_features_added <- predictors.annot(se = SE_hits,
txdb = TxDb.Hsapiens.UCSC.hg19.knownGene,
bsgnm = Hsapiens,
fc = fitCons.UCSC.hg19,
pc = phastCons100way.UCSC.hg19,
struct_hybridize = Struc_hg19,
feature_lst = Feature_List_expanded_hg19,
HK_genes_list = HK_hg19_eids)
design_X <- mcols(SE_features_added)
design_X$Response <- assay(SE_features_added)[,1]
model_x <- glm(Response ~ .,family = poisson(link = "log"),data = design_X)
summary_glm <- summary(model_x)#Notice that most of the predictors are highly significant.
summary_glm
dir.create("Poisson_MDB2_hg19")
setwd("Poisson_MDB2_hg19")
Deviance_df <- data.frame(Deviances = c(summary_glm$deviance,summary_glm$null.deviance),
Dof = c(summary_glm$df.residual,summary_glm$df.null) ,
Model = c("Residual","NULL"))
Critical_value <- qnorm((.05/2)/(ncol(design_X)-1),lower.tail = F)
plot_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value")]
plot_df$X_lab = gsub("_"," ", gsub("TRUE","", rownames(plot_df)))
if(plot_df$X_lab[1] == "(Intercept)") plot_df$X_lab[1] = "Intercept"
plot_df$X_lab = factor(plot_df$X_lab,levels = plot_df$X_lab[order(plot_df$Estimate,decreasing = F)])
plot_df <- reshape2::melt(plot_df,id.vars = "X_lab")
plot_df$Cv <- NA
t_idx <- which(plot_df$variable == "z.value")
plot_df$Cv[t_idx[1]] = Critical_value
plot_df$Cv[t_idx[2]] = -1*Critical_value
library(ggplot2)
p1 <- ggplot(plot_df,aes(x = X_lab, y = value)) + geom_bar(stat = "identity", width = .4, fill = "red", colour = "red", size = 0.1) + geom_hline(aes(yintercept = Cv), alpha = .5, linetype = 2, size = .35) + coord_flip() + facet_grid(~variable,scales = "free") + theme_classic() + labs(title = "Poisson model on genomic features",subtitle = "Metdb2 Hits", x = "predictors")
suppressWarnings( ggsave("RMBase2Hits_logistic_model.pdf", p1, width = 4.8, height = 1.7 +  (nrow(plot_df)/2)*.1 ))
save_df <-  data.frame(summary_glm$coefficients)[,c("Estimate","z.value","Pr...z..")]
colnames( save_df ) = c("Estimate","z.statistics","pvalue")
save_df$Bf_adj_p = p.adjust(save_df$pvalue,method = "bonferroni")
write.csv(save_df,paste0("Statistics.csv"))
write.csv(plot_df,paste0("Plot.csv"))
suppressWarnings( ggsave("Metdb2_logistic_model.pdf", p1, width = 4.8, height = 1.7 +  (nrow(plot_df)/2)*.1 ))
knitr::opts_chunk$set(echo = TRUE)
SE_x <- ("human_svm.rds")
knitr::opts_chunk$set(echo = TRUE)
require(meripQC)
meRIP_mod_QC_report
meRIP_mod_QC_report
83/3
knitr::opts_chunk$set(echo = TRUE)
setwd("hg19_GEO")
ke2015_precise_m6A_sites_A549_hg18 <- read.csv("ke2015_precise_m6A_sites_A549_hg18.csv")
ke2015_precise_m6A_sites_A549_hg18 <- read.csv("hg_GEO/ke2015_precise_m6A_sites_A549_hg18.csv")
ke2015_precise_m6A_sites_A549_hg18 <- read.csv("hg_GEO/ke2015_precise_m6A_sites_A549_hg18.csv")
ke2015_precise_m6A_sites_A549_hg18 <- read.csv("ke2015_precise_m6A_sites_CD8T_hg18.csv")
ke2015_precise_m6A_sites_A549_hg18 <- read.csv("hg_GEO/ke2015_precise_m6A_sites_CD8T_hg18.csv")
ke2015_precise_m6A_sites_A549_hg18 <- read.csv("hg_GEO/ke2015_precise_m6A_sites_A549_hg18.csv")
ke2015_precise_m6A_sites_CD8T_hg18 <- read.csv("hg_GEO/ke2015_precise_m6A_sites_CD8T_hg18.csv")
ke2015_precise_m6A_sites_CD8T_hg18
To_Gr <- function(DF_sb) {
GRanges(seqnames = DF_sb$chromosome, ranges = IRanges(start = DF_sb$modend,width = 1),strand = DF_sb$strand)
}
To_Gr()
CD8T_hg18_gr = To_Gr(ke2015_precise_m6A_sites_A549_hg18)
To_Gr <- function(DF_sb) {
require(GenomicRanges)
GRanges(seqnames = DF_sb$chromosome, ranges = IRanges(start = DF_sb$modend,width = 1),strand = DF_sb$strand)
}
CD8T_hg18_gr = To_Gr(ke2015_precise_m6A_sites_A549_hg18)
CD8T_hg18_gr = To_Gr(ke2015_precise_m6A_sites_A549_hg18)
ke2015_precise_m6A_sites_A549_hg18 <- read.csv("hg_GEO/ke2015_precise_m6A_sites_A549_hg18.csv")
ke2015_precise_m6A_sites_CD8T_hg18 <- read.csv("hg_GEO/ke2015_precise_m6A_sites_CD8T_hg18.csv")
To_Gr <- function(DF_sb) {
require(GenomicRanges)
GRanges(seqnames = DF_sb$chromosome, ranges = IRanges(start = DF_sb$modend,width = 1),strand = DF_sb$strand)
}
CD8T_hg18_gr = To_Gr(ke2015_precise_m6A_sites_CD8T_hg18)
A549_hg18_gr = To_Gr(ke2015_precise_m6A_sites_A549_hg18)
CD8T_hg18_gr
A549_hg18_gr
library(rtracklayer)
library(rtracklayer)
chain_hg18ToHg19 <- readRDS("/Users/zhenwei/Datasets/ChainFiles/chain-hg18ToHg19.rds")
CD8T_hg19_gr <- liftOver(CD8T_hg18_gr,chain_hg18ToHg19)
A549_hg19_gr <- liftOver(A549_hg18_gr,chain_hg18ToHg19)
CD8T_hg19_gr
CD8T_hg19_gr <- unlist(liftOver(CD8T_hg18_gr,chain_hg18ToHg19))
A549_hg19_gr <- unlist(liftOver(A549_hg18_gr,chain_hg18ToHg19))
library(BSgenome.Hsapiens.UCSC.hg19)
Views(Hsapiens,CD8T_hg19_gr)
library(dplyr)
knitr::opts_chunk$set(echo = TRUE)
Let_us_fly <- function(Row_SE,Col_dir = ".",outname = "Untitled") {
require(SummarizedExperiment)
#Create a matrix with entries of 0 and 1 (that are suitable for m6ALogisticModel.)
file.list <- grep("\\.",list.files(Col_dir),value = T, invert = T)
ASSAY_df = data.frame(Indx = 1:nrow(Row_SE))
for (i in file.list){
DS_rst_i <- readRDS(paste0(gsub("\\/$","",Col_dir),"/",i,"/",i,"_ds_result.rds"))
Dcs <- DS_rst_i$Decision
Dcs[Dcs == "Targeted"] = 1
Dcs[Dcs == "Insig"] = NA
Dcs[Dcs == "Control"] = 0
ASSAY_df[[i]] <- Dcs
}
ASSAY_df = ASSAY_df[,-1]
SE_return <- SummarizedExperiment(matrix(as.integer( as.matrix(ASSAY_df) ),ncol = ncol(ASSAY_df)))
rowRanges(SE_return) = rowRanges( Row_SE )
#One drawback immediately reveal it self. that is this approach does not return a good colData.
#I need to add it by my own hand.
Extract_Regulator <- function(Char_Vec){
idx_prot = gsub("^.*_","",Char_Vec)
idx_prot = gsub("-$","",idx_prot)
idx_prot = gsub("\\+$","",idx_prot)
idx_prot = toupper(idx_prot)
return(idx_prot)
}
Extract_Role <- function(Char_Vec){
idx_writer = rep("writer",length(Char_Vec))
idx_writer[ grepl("fto",Char_Vec, ignore.case = T) | grepl("alkbh", Char_Vec, ignore.case = T) ] = "eraser"
return(idx_writer)
}
colData(SE_return) = DataFrame(ID = file.list,
Regulators = Extract_Regulator(file.list),
Role = Extract_Role(file.list))
Consistent_reduction <- function(SE,COL = "Regulators"){
Indx_consist <- colData(SE)[[COL]]
ASSAY_LST <- split(
split(t( matrix( as.integer( assay(SE) ),
ncol = length(Indx_consist))),
1:length(Indx_consist)),
Indx_consist)
Consistent_targeting <- lapply(ASSAY_LST,function(x) {
indx_target <- lapply(x, function(y) {
y[which(y == 0)] = -2
y[is.na(y)] = 0
return(y)
})
Rindx_targ <- Reduce(`+`,indx_target)
return_vec <- rep(NA, length(Rindx_targ))
return_vec[Rindx_targ >= min(2,length(x))] = 1
indx_rev <- lapply(x, function(y) {
y[which(y == 1)] = -2
y[which(y == 0)] = 1
y[is.na(y)] = 0
return(y)
})
Rindx_rev <- Reduce(`+`, indx_rev)
return_vec[Rindx_rev >= min(2,length(x))] = 0
return(return_vec)
})
for(i in names(Consistent_targeting)) {
tb_i =  table( Consistent_targeting[[ i ]] )
cat(paste0(i,": ",names(tb_i),": ",tb_i,"\n"))
}
return(Consistent_targeting)
}
Targets_By_prots <- Consistent_reduction(SE_return,"Regulators")
Targets_By_types <- Consistent_reduction(SE_return,"Role")
Prot_targ_M <- Reduce(cbind,Targets_By_prots)
Prot_type_M <- Reduce(cbind,Targets_By_types)
colnames(Prot_targ_M) = names(Targets_By_prots)
colnames(Prot_type_M) = names(Targets_By_types)
SE_Temp = SummarizedExperiment(cbind(Prot_targ_M,Prot_type_M))
colData(SE_Temp) = DataFrame(
ID = paste0(colnames(SE_Temp),"-consistent"),
Regulators = "-",
Role = "-"
)
rowRanges(SE_Temp) = rowRanges(SE_return)
SE_return <- cbind(SE_return,SE_Temp)
saveRDS(SE_return, paste0(outname, ".rds"))
}
union_hg19_gr <- readRDS("./union_hg19_gr.rds")
svm_hg19_gr <- readRDS("./svm_hg19_gr.rds")
union_mm10_gr <- readRDS("./union_mm10_gr.rds")
svm_mm10_gr <- readRDS("./svm_mm10_gr.rds")
Let_us_fly(svm_hg19_gr,Col_dir = "human_svm_QC",outname = "svm_mouse")
union_mm10_gr
SummarizedExperiment( svm_hg19_gr )
Let_us_fly <- function(Row_GR,Col_dir = ".",outname = "Untitled") {
require(SummarizedExperiment)
#Create a matrix with entries of 0 and 1 (that are suitable for m6ALogisticModel.)
file.list <- grep("\\.",list.files(Col_dir),value = T, invert = T)
ASSAY_df = data.frame(Indx = 1:length(Row_GR))
for (i in file.list){
DS_rst_i <- readRDS(paste0(gsub("\\/$","",Col_dir),"/",i,"/",i,"_ds_result.rds"))
Dcs <- DS_rst_i$Decision
Dcs[Dcs == "Targeted"] = 1
Dcs[Dcs == "Insig"] = NA
Dcs[Dcs == "Control"] = 0
ASSAY_df[[i]] <- Dcs
}
ASSAY_df = ASSAY_df[,-1]
SE_return <- SummarizedExperiment(matrix(as.integer( as.matrix(ASSAY_df) ),ncol = ncol(ASSAY_df)))
rowRanges(SE_return) = Row_GR
#One drawback immediately reveal it self. that is this approach does not return a good colData.
#I need to add it by my own hand.
Extract_Regulator <- function(Char_Vec){
idx_prot = gsub("^.*_","",Char_Vec)
idx_prot = gsub("-$","",idx_prot)
idx_prot = gsub("\\+$","",idx_prot)
idx_prot = toupper(idx_prot)
return(idx_prot)
}
Extract_Role <- function(Char_Vec){
idx_writer = rep("writer",length(Char_Vec))
idx_writer[ grepl("fto",Char_Vec, ignore.case = T) | grepl("alkbh", Char_Vec, ignore.case = T) ] = "eraser"
return(idx_writer)
}
colData(SE_return) = DataFrame(ID = file.list,
Regulators = Extract_Regulator(file.list),
Role = Extract_Role(file.list))
Consistent_reduction <- function(SE,COL = "Regulators"){
Indx_consist <- colData(SE)[[COL]]
ASSAY_LST <- split(
split(t( matrix( as.integer( assay(SE) ),
ncol = length(Indx_consist))),
1:length(Indx_consist)),
Indx_consist)
Consistent_targeting <- lapply(ASSAY_LST,function(x) {
indx_target <- lapply(x, function(y) {
y[which(y == 0)] = -2
y[is.na(y)] = 0
return(y)
})
Rindx_targ <- Reduce(`+`,indx_target)
return_vec <- rep(NA, length(Rindx_targ))
return_vec[Rindx_targ >= min(2,length(x))] = 1
indx_rev <- lapply(x, function(y) {
y[which(y == 1)] = -2
y[which(y == 0)] = 1
y[is.na(y)] = 0
return(y)
})
Rindx_rev <- Reduce(`+`, indx_rev)
return_vec[Rindx_rev >= min(2,length(x))] = 0
return(return_vec)
})
for(i in names(Consistent_targeting)) {
tb_i =  table( Consistent_targeting[[ i ]] )
cat(paste0(i,": ",names(tb_i),": ",tb_i,"\n"))
}
return(Consistent_targeting)
}
Targets_By_prots <- Consistent_reduction(SE_return,"Regulators")
Targets_By_types <- Consistent_reduction(SE_return,"Role")
Prot_targ_M <- Reduce(cbind,Targets_By_prots)
Prot_type_M <- Reduce(cbind,Targets_By_types)
colnames(Prot_targ_M) = names(Targets_By_prots)
colnames(Prot_type_M) = names(Targets_By_types)
SE_Temp = SummarizedExperiment(cbind(Prot_targ_M,Prot_type_M))
colData(SE_Temp) = DataFrame(
ID = paste0(colnames(SE_Temp),"-consistent"),
Regulators = "-",
Role = "-"
)
rowRanges(SE_Temp) = rowRanges(SE_return)
SE_return <- cbind(SE_return,SE_Temp)
saveRDS(SE_return, paste0(outname, ".rds"))
}
Let_us_fly(svm_hg19_gr,Col_dir = "human_svm_QC",outname = "svm_mouse")
union_hg19_gr <- readRDS("./union_hg19_gr.rds")
svm_hg19_gr <- readRDS("./svm_hg19_gr.rds")
Let_us_fly(svm_hg19_gr,Col_dir = "human_svm_QC",outname = "svm_mouse")
Let_us_fly(union_hg19_gr,Col_dir = "human_union_QC",outname = "union_mouse")
Let_us_fly(svm_mm10_gr,Col_dir = "mouse_svm_QC",outname = "svm_mouse")
Let_us_fly(union_mm10_gr,Col_dir = "mouse_union_QC",outname = "union_mouse")
Let_us_fly(svm_hg19_gr,Col_dir = "human_svm_QC",outname = "svm_human")
Let_us_fly(union_hg19_gr,Col_dir = "human_union_QC",outname = "union_human")
Let_us_fly(svm_mm10_gr,Col_dir = "mouse_svm_QC",outname = "svm_mouse")
Let_us_fly(union_mm10_gr,Col_dir = "mouse_union_QC",outname = "union_mouse")
svm_human <- readRDS("svm_human.rds")
svm_human
assay(svm_human)
colnames(svm_human)
colData(svm_human)
assay(svm_human)[,5]
table(assay(svm_human)[,5])
DS_res <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_ds_result.rds")
DS_res
table(DS_res$Decision)
DS_res$pvalue < 0.168640466306501
na.omit( DS_res$pvalue < 0.168640466306501)
ex <- DS_res$pvalue < 0.168640466306501
sum(ex[!is.na(ex)])
ex <- DS_res$pvalue <= 0.168640466306501 & DS_res$log2FoldChange > 0
sum(ex[!is.na(ex)])
ex <- DS_res$pvalue < 0.168640466306501 & DS_res$log2FoldChange < 0
sum(ex[!is.na(ex)])
ex <- DS_res$pvalue < 0.168640466306501 & DS_res$log2FoldChange > 0
sum(ex[!is.na(ex)])
apply(assay(svm_human),2,table)
ds_result <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_ds_result.rds")
Dcs_tb <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_Dcs_tb.csv")
Dcs_tb <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_Dcs_tb.csv")
Decision_O <- ds_result$Decision
Dcs_tb <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_Dcs_tb.csv")
ds_result$Decision = "Insig"
#Make decisions based on the decision table.
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Dcs_tb
Dcs_tb$Cut_By_ctrl]
Dcs_tb$Cut_By_ctrl
(ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
ds_result[[Dcs_tb$Cut_By_ctrl]]
ds_result
ds_result <- as.data.frame( ds_result )
#Make decisions based on the decision table.
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Control_index
table(Control_index)
sum(ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl)
Dcs_tb$log2FC_cut
if (Dcs_tb$Expected_dir == "< 0"){
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
} else {
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
}
sum(Control_index)
table(Control_index)
ds_result <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_ds_result.rds")
Decision_O <- ds_result$Decision
# Analysis DESeq2 result and generate a decision table:
Dcs_tb <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_Dcs_tb.csv")
ds_result$Decision = "Insig"
ds_result <- as.data.frame( ds_result )
if (Dcs_tb$Expected_dir == "< 0"){
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
} else {
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
}
if(is.null(Expected_change) & DM_analysis){
ds_result$Decision[Control_index] = "Hypo-Meth"
ds_result$Decision[Expected_index] = "Hyper-Meth"
}
Expected_change = ">0"
ds_result$Decision[Control_index] = "Control"
ds_result$Decision[Expected_index] = ifelse(!is.null(Expected_change),"Targeted","Methylated")
table(ds_result$Decision)
ds_result <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_ds_result.rds")
Decision_O <- ds_result$Decision
# Analysis DESeq2 result and generate a decision table:
Dcs_tb <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/human_svm_QC/DM_human-AML_FTO+/DM_human-AML_FTO+_Dcs_tb.csv")
ds_result$Decision = "Insig"
ds_result <- as.data.frame( ds_result )
if (Dcs_tb$Expected_dir == "< 0"){
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
} else {
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
}
Dcs_tb$Expected_dir
Dcs_tb$Expected_dir == "< 0"
Control_index =  (ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
table(Control_index )
table(ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
table((ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut))
Dcs_tb$Cut_By_ctrl
Dcs_tb$Cut_Val_ctrl
(ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
table((ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut))
(ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
table((ds_result[[Dcs_tb$Cut_By_ctrl]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut))
(ds_result[[Dcs_tb$Cut_By_expected]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
ds_result$pvalue < 0.168640466306501
ds_result$pvalue < 0.168640466306501 & ds_result$log2FoldChange > 0
table(ds_result$pvalue < 0.168640466306501 & ds_result$log2FoldChange > 0)
table(ds_result$pvalue < 0.168640466306501 & ds_result$log2FoldChange > 0)
Dcs_tb$Cut_By_ctrl
Dcs_tb$Cut_Val_ctrl
Dcs_tb$Cut_By_ctrl
table( (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut))
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[as.character(Dcs_tb$Cut_By_expected)]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
table( Expected_index)
Let_us_fly <- function(Row_GR,Col_dir = ".",outname = "Untitled") {
require(SummarizedExperiment)
#Create a matrix with entries of 0 and 1 (that are suitable for m6ALogisticModel.)
file.list <- grep("\\.",list.files(Col_dir),value = T, invert = T)
ASSAY_df = data.frame(Indx = 1:length(Row_GR))
for (i in file.list){
DS_rst_i <- readRDS(paste0(gsub("\\/$","",Col_dir),"/",i,"/",i,"_ds_result.rds"))
Dcs <- DS_rst_i$Decision
Dcs[Dcs == "Targeted"] = 1
Dcs[Dcs == "Insig"] = NA
Dcs[Dcs == "Control"] = 0
ASSAY_df[[i]] <- Dcs
}
ASSAY_df = ASSAY_df[,-1]
SE_return <- SummarizedExperiment(matrix(as.integer( as.matrix(ASSAY_df) ),ncol = ncol(ASSAY_df)))
rowRanges(SE_return) = Row_GR
#One drawback immediately reveal it self. that is this approach does not return a good colData.
#I need to add it by my own hand.
Extract_Regulator <- function(Char_Vec){
idx_prot = gsub("^.*_","",Char_Vec)
idx_prot = gsub("-$","",idx_prot)
idx_prot = gsub("\\+$","",idx_prot)
idx_prot = toupper(idx_prot)
return(idx_prot)
}
Extract_Role <- function(Char_Vec){
idx_writer = rep("writer",length(Char_Vec))
idx_writer[ grepl("fto",Char_Vec, ignore.case = T) | grepl("alkbh", Char_Vec, ignore.case = T) ] = "eraser"
return(idx_writer)
}
colData(SE_return) = DataFrame(ID = file.list,
Regulators = Extract_Regulator(file.list),
Role = Extract_Role(file.list))
Consistent_reduction <- function(SE,COL = "Regulators"){
Indx_consist <- colData(SE)[[COL]]
ASSAY_LST <- split(
split(t( matrix( as.integer( assay(SE) ),
ncol = length(Indx_consist))),
1:length(Indx_consist)),
Indx_consist)
Consistent_targeting <- lapply(ASSAY_LST,function(x) {
indx_target <- lapply(x, function(y) {
y[which(y == 0)] = -2
y[is.na(y)] = 0
return(y)
})
Rindx_targ <- Reduce(`+`,indx_target)
return_vec <- rep(NA, length(Rindx_targ))
return_vec[Rindx_targ >= min(2,length(x))] = 1
indx_rev <- lapply(x, function(y) {
y[which(y == 1)] = -2
y[which(y == 0)] = 1
y[is.na(y)] = 0
return(y)
})
Rindx_rev <- Reduce(`+`, indx_rev)
return_vec[Rindx_rev >= min(2,length(x))] = 0
return(return_vec)
})
for(i in names(Consistent_targeting)) {
tb_i =  table( Consistent_targeting[[ i ]] )
cat(paste0(i,": ",names(tb_i),": ",tb_i,"\n"))
}
return(Consistent_targeting)
}
Targets_By_prots <- Consistent_reduction(SE_return,"Regulators")
Targets_By_types <- Consistent_reduction(SE_return,"Role")
Prot_targ_M <- Reduce(cbind,Targets_By_prots)
Prot_type_M <- Reduce(cbind,Targets_By_types)
colnames(Prot_targ_M) = names(Targets_By_prots)
colnames(Prot_type_M) = names(Targets_By_types)
SE_Temp = SummarizedExperiment(cbind(Prot_targ_M,Prot_type_M))
colData(SE_Temp) = DataFrame(
ID = paste0(colnames(SE_Temp),"-consistent"),
Regulators = "-",
Role = "-"
)
rowRanges(SE_Temp) = rowRanges(SE_return)
SE_return <- cbind(SE_return,SE_Temp)
saveRDS(SE_return, paste0(outname, ".rds"))
}
union_mm10_gr <- readRDS("./union_mm10_gr.rds")
svm_mm10_gr <- readRDS("./svm_mm10_gr.rds")
Let_us_fly(svm_mm10_gr,Col_dir = "mouse_svm_QC",outname = "svm_mouse")
Let_us_fly(union_mm10_gr,Col_dir = "mouse_union_QC",outname = "union_mouse")
mouse_union_QC <- readRDS("mouse_union_QC.rds")
mouse_union_QC <- readRDS("svm_mouse.rds")
apply(2,assay(mouse_union_QC),table)
apply(assay(mouse_union_QC),2,table)
colData(mouse_union_QC)
colData(mouse_union_QC)$ID
ds_result <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/mouse_svm_QC/DM_mouse-3T3L1_Fto-/DM_mouse-3T3L1_Fto-_ds_result.rds")
ds_result <- readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/mouse_svm_QC/DM_mouse-3T3L1_Fto-/DM_mouse-3T3L1_Fto-_ds_result.rds")
Dcs_tb <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/mouse_svm_QC/DM_mouse-3T3L1_Fto-/DM_mouse-3T3L1_Fto-_Dcs_tb.csv")
ds_result <- as.data.frame( readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/mouse_svm_QC/DM_mouse-3T3L1_Fto-/DM_mouse-3T3L1_Fto-_ds_result.rds"))
Dcs_tb <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/mouse_svm_QC/DM_mouse-3T3L1_Fto-/DM_mouse-3T3L1_Fto-_Dcs_tb.csv")
ds_result$Decision = "Insig"
if (Dcs_tb$Expected_dir == "< 0"){
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[as.character(Dcs_tb$Cut_By_expected)]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
} else {
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[as.character(Dcs_tb$Cut_By_expected)]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
}
table(Control_index )
table(Expected_index)
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[as.character(Dcs_tb$Cut_By_expected)]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
table(Control_index )
table(Expected_index)
Dcs_tb$Cut_Val_ctrl
ds_result <- as.data.frame( readRDS("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/mouse_svm_QC/DM_mouse-midbrain_Fto-/DM_mouse-midbrain_Fto-_ds_result.rds"))
Dcs_tb <- read.csv("/Users/zhenwei/Documents/GitHub/TREW-cons/L_Recount_SBsites_2018_2_1/All_QC/mouse_svm_QC/DM_mouse-midbrain_Fto-/DM_mouse-midbrain_Fto-_Dcs_tb.csv")
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[as.character(Dcs_tb$Cut_By_expected)]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
table(Control_index)
table(Expected_index)
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[as.character(Dcs_tb$Cut_By_expected)]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
table(Control_index )
table(Expected_index)
Control_index =  (ds_result[[as.character(Dcs_tb$Cut_By_ctrl)]] < Dcs_tb$Cut_Val_ctrl) & (ds_result$log2FoldChange < Dcs_tb$log2FC_cut)
Expected_index = (ds_result[[as.character(Dcs_tb$Cut_By_expected)]] < Dcs_tb$Cut_Val_expected) & (ds_result$log2FoldChange > Dcs_tb$log2FC_cut)
table(Control_index)
table(Expected_index)
table(ds_result$Decision)
svm_mouse <- readRDS("svm_mouse.rds")
apply(assay(svm_mouse),2,table)
colData(svm_mouse)
colData(svm_mouse)[9,]
